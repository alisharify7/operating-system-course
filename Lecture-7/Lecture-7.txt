سیستم عامل جلسه 7
قطعه بندی
دیدگاه کاربرنسبت به حافظه، با حافظه فیزیکی یکسان نیست. این موضوع برای دیدگاه برنامه نویس نسبت به حافظه هم درست است. در واقع ، برخورد با حافظه بر حسب ویژگی های قیزیکی آن، برای سیستم عامل و برنامه نویس راحت نیست. چه می شد اگر سخت افزار می توانست یک راهکار حافظه فراهم کند که دیدگاه برنامه نویس را به حافظه فیزیکی واقعی نگاشت کند

سیستم آزادی عمل بیشتری برای مدیریت حافظه داشت، در حالی که برنامه نویس یک محیز برنامه نویسی طبیعی تر را خواهد داشت. قطعه بندی چنین کاری را انجام می دهد.

روش اصلی
برنامه نویس ها ترجیب می دهند حافظه را به صورت مجموعه ای از قطعاتی با طول متغییر در نظر بگیرند که لاز نیست ترتیبی بین قطعات وجود داشته باشد

هنگام نوشتن برنامه، برنامه نویس آن را به عنوان یک برنامه اصلی با مجموعه ای از متدها ، رویه ها یا توابع در نظر می گیرد. ممکن است شامل ساختمان داده های گوناگونی مثل اشیا، پشته ها، متغییر ها و غیره باشد. به هرکدام از این پیمانه ها یا عناصر داده به وسیله نامشان مراجعه می شود. برنامه نویس درباره "پشته"، " کتابخانه ی توابع ریاضی " و " برنامه اصلی " صخبت می کند و به آدرس های حافظه ای که این عناصر را در آن جا ذخیره شده اند اشاره نمی کند. او دغدغه ی این را ندارد که آیا پشته، قبل یا بعد از تابغ sqrt() ذخیره شده است یا نه. هر کدام از این قطعات، اندازه های متفاوتی دارند. اندازه ی آن ها به وسیله ی اهداف آن ها در برنامه مشخص می شود. عناصر موجود در یک قطعه، به وسیله ی آفست آن ها از آغاز قطعه مشخص می شود: مثل اولیم دستور برنامه، هفتمین مدخل بر پشته در داخل پشته، پنجمین دستور sqrt() و غیره...
قطعه بندی (segmentation) یک الگوری مدیریت حافظه است که این دیدگاه برنمه نویس نسبت به حافظه را پشتیبانی می کند. فضای آدرس منطقی، مجموعه ای از قطعات است. هر قطعه دارای نام و طول است. آدرس ها، نام قطعه و آفستی در داخل قطعه را مشخص می کنند.
بنابراین برنامه نویس هر آدرس را با دو کمیت مشخص می کند:
نام قطعه و یک آفست (فاصله از مبدا)
برای سهولت پیاده سازی، قطعات شماره گذاری می شوند و از طریق این شماره به آن ها مراجعه می شود (نه نام قطعه). بنابراین این آدرس منطقی شامل یک دوتایی است
<آفست و شماره صفحه>
معمولا وقتی برنامه ترجمه می شود، کامپایلر به طور خودکار قطعات برنامه ی ورودی را می سازد.

سخت افزار قطعه بندی
گرچه برنامه نویس می تواند از طریق آدرس دو بعدی به اشیای برنامه مراجعه کند ولی حافظه ی فیزیکی واقعی، دنباله ی یک بعدی ای از بایت ها است. لذا باید یک پیاده سازی ای را تعریف کنیم که آدرس های دو بعدی تعریفی برنامه را به آدرس های فیزیکی یک بعدی نگاشت کند.
این نگاشت توسط جدول قطعه (Segment table)  انجام می شود. هر مدخل جدول قطعه دارای یک پایه ی قطعه و یک حد قطعه است
پایه ی قطعه شامل آدرس شروع حافظه ی فیزیکی است که قطعه در آن جا قرار دارد و حد قطعه ، طول قطعه را مشخص می کند
آدرس منطقی شامل دو بخش است:
شماره ی قطعه که با s  نمایش داده می شود و آفستی که در قطعه که با d  نمایش داده می شود. شماره ی قطعه به عنوان اندیسی در حدول قطعه مورد استفاده قرار می گیرد. افست d  مربوط به آدرس منطقی باید بین صفر و حد قطعه باشد. اگر نباشد تله ای برای سیستم عامل در نظر می گیریم(آدرس منطقی از قطعه خارج شده است). اگر افست معتبر باشد و به پایه ی قطعه اضافه می شود تا آدرس فیزیکی بایت مطلوب تولید شود. قطعه در واقع آرایه ای از جفت پایه – حد است

در شکل زیر پنج قطعه وجود دارد که از 0 تا 4 شماره گذاری شده اندو این قطعات به صورتی که نشان داده شده است در حافظه فیزیکی ذخیره شده اند. به ازای هر قطعه یک مدخل در جدول قطعه وجود دارد که آأرس شروع قطعه در حافظه فیزیکی (پایه) و طول قطعه (حد) را مشخص می کند. به عنوان مثال» قطعه ی 2  برابر با 400 بایت ست که از محل 4300 شروع می شود ، بنابراین، ارجاع به بایت 53 از قطعه ی 2، به محل 4300+53=4353 نگاشت می شود. ازجاع به قطعه ی 3 و بایت شماره 852 به محل 3200+852=4052 نگاشت می شود (3200 پایه ی قطعه 3 است). ارجاع به بایت 1222 از قطعه 0 منجر به تله ای به سیستم عامل می شود، زیرا طول این قطعه 1000 بایت است.

صفحه بندی (paging)
قطعه بندی اجازه می دهد که فضای آدرس یک فرایند، همجوار (پیوسته) نباشد. صفحه بندی ، یک طرح دیگر از مدیریت حافظه است که اجازه می دهد  فضای آدرس فیزیکی فرایند، همجوار نباشد.
صفحه بندی از تکه تکه شدن خارحی و نیاز به فشرده سازی اجتناب می کند. در حالی که قطعه بندی نمی تواند، علاوه بر این ، مساله ی  برازش تکه هایی با اندازه متغییر را بر روی دیسک ذخیره ساز پشتیبان، حل  می کند. این مساله به این دلیل به وجود می آید که در صورت نیاز به مبادله ی قطعات کد یا داده های موجود در حافظه به بیرون از حافظه باید فضایی در ذخیره ساز پشتیبان پیدا شود ذخیره ساز پشتیبان با همان مساله های تکه تکه شدن که در مورد حافظه ی اصلی مطرح شد، مواجه است ولی دستیابی به آن کندتر است و در نتیجه فشرده سازی ممکن نیست. به دلیل این امتیازات صفحه بندی نسبت به روش های پیشین ، شکل های مختلف صفحه بندی در اکثر سیستم های عامل مورد استفاده قرار می گیرد. از سیستم های عامل کامپیوتر های بزرگ گرفته تا گوشی های هوشمند. صفحه بندی از طریق هماهنگی بین سیستم عامل و سخت افزار کامپیوتر انجام می گیرد.
روش اصلی صفحه بندی
